package dao;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.Customer;
import model.Location;
import model.RevenueItem;

public class SalesDao {

    private List<RevenueItem> getDummyRevenueItems()
    {
        List<RevenueItem> items = new ArrayList<RevenueItem>();

		/*Sample data begins*/
        for (int i = 0; i < 10; i++) {
            RevenueItem item = new RevenueItem();
            item.setDate(new Date());
            item.setNumShares(5);
            item.setAccountId("foo");
            item.setPricePerShare(50.0);
            item.setStockSymbol("AAPL");
            item.setAmount(150.0);
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }
    public List<RevenueItem> getSalesReport(String month, String year) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to get sales report for a particular month and year
		 */

        List<RevenueItem> sales = new ArrayList<RevenueItem>();
        java.sql.Connection myConnection = null;
        try {
            String mysJDBCDriver = "com.mysql.jdbc.Driver";
            String url = "jdbc:mysql://localhost:3306/new_schema";
            String userID = "root";
            String password1 = "root";
            Class.forName(mysJDBCDriver).newInstance();
            java.util.Properties mysys = System.getProperties();
            mysys.put("user", userID);
            mysys.put("password", password1);
            myConnection = DriverManager.getConnection(url, mysys);
            Statement myStatement= myConnection.createStatement();
                ResultSet resultSet = myStatement.executeQuery("SELECT O.NumShares, O.PricePerShare, O.DateTime, (O.NumShares * O.PricePerShare) AS Amount, S.StockSymbol, T.AccountId FROM Trade T, Orderr O, Stock S WHERE T.StockId = S.StockName AND O.Id = T.OrderId AND YEAR(O.DateTime) = '"+year+"' AND MONTH(O.DateTime) = '"+month+"';");
                while (resultSet.next()) {
                    RevenueItem item = new RevenueItem();
                    item.setDate(resultSet.getTimestamp("DateTime"));
                    item.setNumShares(resultSet.getInt("NumShares"));
                    item.setAccountId(resultSet.getString("AccountId"));
                    item.setPricePerShare(resultSet.getInt("PricePerShare"));
                    item.setStockSymbol(resultSet.getString("StockSymbol"));
                    item.setAmount(resultSet.getInt("Amount"));
                    sales.add(item);
                }
                try {
                    myConnection.close();
                } catch (SQLException e) {
                    System.out.print(e);
                }
        }
        catch(Exception e){
            System.out.print(e);
        }
        return sales;
    }



    public List<RevenueItem> getSummaryListing(String searchKeyword) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular stock,
		 * stock type or customer must be implemented
		 * Store the revenue generated by an item in the amount attribute
		 */

        List<RevenueItem> sales = new ArrayList<RevenueItem>();
        java.sql.Connection myConnection = null;
        try {
            String mysJDBCDriver = "com.mysql.jdbc.Driver";
            String url = "jdbc:mysql://localhost:3306/new_schema";
            String userID = "root";
            String password1 = "root";
            Class.forName(mysJDBCDriver).newInstance();
            java.util.Properties mysys = System.getProperties();
            mysys.put("user", userID);
            mysys.put("password", password1);
            myConnection = DriverManager.getConnection(url, mysys);
            Statement myStatement= myConnection.createStatement();
            ResultSet resultSet = myStatement.executeQuery("SELECT C.Id, S.StockSymbol, SUM(O.NumShares) AS NumShares, O.PricePerShare, O.DateTime, SUM(O.NumShares * O.PricePerShare) AS Amount, T.AccountId FROM Trade T, Customer C, Orderr O, Stock S WHERE (S.StockSymbol = '"+searchKeyword+"' AND C.Id = T.AccountId AND T.OrderId = O.Id AND S.StockName = T.StockId);");
            while (resultSet.next()) {
                RevenueItem item = new RevenueItem();
                item.setDate(resultSet.getTimestamp("DateTime"));
                item.setNumShares(resultSet.getInt("NumShares"));
                item.setAccountId(resultSet.getString("AccountId"));
                item.setPricePerShare(resultSet.getInt("PricePerShare"));
                item.setStockSymbol(resultSet.getString("StockSymbol"));
                item.setAmount(resultSet.getInt("Amount"));
                sales.add(item);
            }
            if (sales.get(0).getStockSymbol() == null) {
                sales.clear();
                resultSet = myStatement.executeQuery("SELECT C.Id, S.StockSymbol, SUM(O.NumShares) AS NumShares, O.PricePerShare, O.DateTime, SUM(O.NumShares * O.PricePerShare) AS Amount, T.AccountId FROM Trade T, Customer C, Orderr O, Stock S WHERE (S.StockName = '"+searchKeyword+"' AND C.Id = T.AccountId AND T.OrderId = O.Id AND S.StockName = T.StockId);");
                while (resultSet.next()) {
                    RevenueItem item = new RevenueItem();
                    item.setDate(resultSet.getTimestamp("DateTime"));
                    item.setNumShares(resultSet.getInt("NumShares"));
                    item.setAccountId(resultSet.getString("AccountId"));
                    item.setPricePerShare(resultSet.getInt("PricePerShare"));
                    item.setStockSymbol(resultSet.getString("StockSymbol"));
                    item.setAmount(resultSet.getInt("Amount"));
                    sales.add(item);
                }
            }
            if (sales.get(0).getStockSymbol() == null) {
                sales.clear();
                resultSet = myStatement.executeQuery("SELECT C.Id, S.StockSymbol, SUM(O.NumShares) AS NumShares, O.PricePerShare, O.DateTime, SUM(O.NumShares * O.PricePerShare) AS Amount, T.AccountId FROM Trade T, Customer C, Orderr O, Stock S WHERE (S.StockType = '"+searchKeyword+"' AND C.Id = T.AccountId AND T.OrderId = O.Id AND S.StockName = T.StockId);");
                while (resultSet.next()) {
                    RevenueItem item = new RevenueItem();
                    item.setDate(resultSet.getTimestamp("DateTime"));
                    item.setNumShares(resultSet.getInt("NumShares"));
                    item.setAccountId(resultSet.getString("AccountId"));
                    item.setPricePerShare(resultSet.getInt("PricePerShare"));
                    item.setStockSymbol(resultSet.getString("StockSymbol"));
                    item.setAmount(resultSet.getInt("Amount"));
                    sales.add(item);
                }
            }
            if (sales.get(0).getStockSymbol() == null) {
                sales.clear();
                resultSet = myStatement.executeQuery("SELECT C.Id, S.StockSymbol, SUM(O.NumShares) AS NumShares, O.PricePerShare, O.DateTime, SUM(O.NumShares * O.PricePerShare) AS Amount, T.AccountId FROM Trade T, Customer C, Orderr O, Stock S WHERE (C.FirstName = '"+searchKeyword+"' AND C.Id = T.AccountId AND T.OrderId = O.Id AND S.StockName = T.StockId);");
                while (resultSet.next()) {
                    RevenueItem item = new RevenueItem();
                    item.setDate(resultSet.getTimestamp("DateTime"));
                    item.setNumShares(resultSet.getInt("NumShares"));
                    item.setAccountId(resultSet.getString("AccountId"));
                    item.setPricePerShare(resultSet.getInt("PricePerShare"));
                    item.setStockSymbol(resultSet.getString("StockSymbol"));
                    item.setAmount(resultSet.getInt("Amount"));
                    sales.add(item);
                }
            }
            if (sales.get(0).getStockSymbol() == null) {
                sales.clear();
                resultSet = myStatement.executeQuery("SELECT C.Id, S.StockSymbol, SUM(O.NumShares) AS NumShares, O.PricePerShare, O.DateTime, SUM(O.NumShares * O.PricePerShare) AS Amount, T.AccountId FROM Trade T, Customer C, Orderr O, Stock S WHERE (C.LastName = '"+searchKeyword+"' AND C.Id = T.AccountId AND T.OrderId = O.Id AND S.StockName = T.StockId);");
                while (resultSet.next()) {
                    RevenueItem item = new RevenueItem();
                    item.setDate(resultSet.getTimestamp("DateTime"));
                    item.setNumShares(resultSet.getInt("NumShares"));
                    item.setAccountId(resultSet.getString("AccountId"));
                    item.setPricePerShare(resultSet.getInt("PricePerShare"));
                    item.setStockSymbol(resultSet.getString("StockSymbol"));
                    item.setAmount(resultSet.getInt("Amount"));
                    sales.add(item);
                }
            }
            else {
                sales.clear();
            }
            try {
                myConnection.close();
            } catch (SQLException e) {
                System.out.print(e);
            }
        }
        catch(Exception e){
            System.out.print(e);
        }
        return sales;
    }
}
